
// Define the number of days in each month of the Nepali calendar for different years
// A safe pattern to use for future years where exact data is not known
const DEFAULT_YEAR_PATTERN = [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30];

// Common patterns in BS calendar for projection
const PATTERN_A = [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30]; // Common pattern
const PATTERN_B = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]; // Common pattern
const PATTERN_C = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]; // Common pattern

export const nepaliMonthData: { [year: number]: number[] } = {
  // Existing data
  2070: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2071: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  2072: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2073: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2074: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2075: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
  2076: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2077: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2078: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2079: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2080: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2081: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2082: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2083: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2084: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2085: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2086: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2087: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2088: [30, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2089: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2090: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2091: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2092: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2093: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2094: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2095: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2096: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2097: [30, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2098: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2099: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2100: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  // Extended years data (projected patterns)
  2101: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2102: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2103: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2104: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2105: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2106: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2107: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
  2108: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
  2109: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
  2110: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
};

// Get month lengths - with pattern fallback for years beyond our dataset
export const getMonthLengths = (year: number): number[] => {
  // If we have exact data, use it
  if (nepaliMonthData[year]) {
    return nepaliMonthData[year];
  }
  
  // Otherwise use patterns based on year modulo 3
  const mod = year % 3;
  if (mod === 0) return [...PATTERN_A]; // Clone to prevent mutation
  if (mod === 1) return [...PATTERN_B];
  return [...PATTERN_C];
};

// Reference date for conversion: Jan 1, 2014 AD = Poush 17, 2070 BS
export const referenceEnDate = new Date(2014, 0, 1);
export const referenceBsDate = {
  year: 2070,
  month: 8, // Poush = 8 (0-indexed)
  day: 17
};

// Updated reference: April 14, 2023 = Baisakh 1, 2080 BS (more recent and accurate)
export const referenceEnDate2 = new Date(2023, 3, 14); // April 14, 2023
export const referenceBsDate2 = {
  year: 2080,
  month: 0, // Baisakh = 0 (0-indexed)
  day: 1
};
